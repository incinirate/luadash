      __                ____
  ---/ /  __ __ ___ _  / __/ ____ ___   ____ ___
 ---/ /__/ // // _ `/ _\ \  / __// _ \ / __// -_)
---/____/\_,_/ \_,_/ /___/  \__/ \___//_/   \__/


(Press 'q' at any time to exit the pager.)

Each of the functions mentioned below has their own
documentation page; You can read it by executing

  luascore [function]

* _.expect(name, idx, type, value)

  Assert that 'value' is of the given 'type', and,
  if not, throw an error in the format

  name: bad argument #idx (type expected, got ...)

* _.partial(f, ...)

  Return a function corresponding to the partial
  application of 'f' to the given arguments.

* _.mapWithKey(table, function)

  Modify each key-value pair in 'table' by applying
  'function' to get the new key /and/ value.

* _.reduceWithIndex(array, function, zero)

  Reduce all of the elements in 'array' to a single
  value by successively applying 'function' to each
  element, its index, and the accumulator, starting
  from 'zero'.

* _.reduce(array, function, zero)

  Reduce all of the elements in 'array' to a single
  value by successively applying 'function' to each
  element, and the accumulator, starting
  from 'zero'.

  Unlike `reduceWithIndex', 'function' is *not*
  applied to the indices!

* _.apply(function, arguments)

  Apply 'function' to the array 'arguments'.

    _.apply(f, { 1, 2, 3 }) = f(1,2,3)

* _.range([begin], stop, [step=1])

  Creates an array of numbers progressing from
  'begin' to 'stop' inclusively. A step of '-1'
  will be used if a negative 'stop' is specified
  without a 'begin' or 'step'.

* _.clone(t)

  Returns a shallow copy of 't'

* _.map(array, function, ...)

  Create a new array by applying 'function' to
  every i-th element from 'array' and '...'.

* _.zip(...)

  Create a new array by grouping together every
  i-th element of '...'.

* _.push(t, ...) !

  This function mutates 't'.
  Add '...' to the end of 't', in place.

* _.intersperse(array, element)

  Return a new array created by inserting 'element'
  after each element of 'array'.

* _.flatten(val)

  Turn 'val', an array-of-arrays to a single array,
  by unpacking each of its elements. Elements which
  are not arrays are left alone.

* _.flatMap(array, f, ...)

  Create a new array by applying 'function' to
  every i-th element from 'array' and '...', and
  concatenating all of the resulting arrays.

* _.filter(array, predicate)

  Restrict 'array' to the elements for which
  'predicate' returns true.

* _.id(value)

  Return 'value' unmodified.

* _.sort(array)

  Sort the elements of 'array' and return it.
  Merely an alias for 'table.sort'

* _.sortBy(array, function)

  Sort 'array' by 'function' where the value
  returned by 'function' determines how the
  array will be sorted.

* _.sampleSize(array, n)

  Select 'n' random, distinct items from 'array'
  and collect them into a list. If 'n' is larger
  than the array, all elements will be returned,
  with no duplicates.

* _.sample(array)

  Select a single random element from 'array'

* _.head(x), _.last(x)

  Return the first (respectively, last) element of
  'x'.

* _.tail(x), _.initial(x)

  Return 'x', with the first (respectively, last)
  element removed.

* _.every(array, predicate)

  Checks that 'predicate' is true for all elements
  of 'array'.

* _.some(array, predicate)

  Checks that 'predicate' is true for at least one
  element of 'array'.

* _.nth(array, i)

  Select the 'i'-th element of 'array'.

* _.keys(t)

  Return a list of the keys in 't'.

* _.values(t)

  Return a list of the values in 't'.

* _.property(path)

  Creates a function that returns the value at
  path of a given table.

* _.matchesProperty(path, value)

  Creates a function that performs a partial
  deep comparison between the value at path of
  a given table to srcValue, returning true if
  the table value is equivalent, else false.

* _.matches(source)

  Creates a function that performs a partial
  deep comparison between a given table and
  source, returning true if the given table
  has equivalent property values, else false.

* _.shuffle(array)

  Creates an array using values from 'array' but
  the order of the values are shuffled.
